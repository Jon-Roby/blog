<h1>Algorithms</h1>

<h2>Binary Search</h2>
<p>class Array
  def binary_search(val, low=0, high=(length - 1))
    return nil if high < low
    mid = (low + high) / 2
    case
      when self[mid] > val then binary_search(val, low, mid-1)
      when self[mid] < val then binary_search(val, mid+1, high)
      else mid
    end
  end
end
</p>

<h2>Selection Sort</h2>

<p>class Array
  def selectionsort!
    for i in 0..length-2
      min_idx = i
      for j in (i+1)...length
        min_idx = j  if self[j] < self[min_idx]
      end
      self[i], self[min_idx] = self[min_idx], self[i]
    end
    self
  end
end	
</p>


<h2>Insertion Sort</h2>
<p>class Array
  def selectionsort!
    for i in 0..length-2
      min_idx = i
      for j in (i+1)...length
        min_idx = j  if self[j] < self[min_idx]
      end
      self[i], self[min_idx] = self[min_idx], self[i]
    end
    self
  end
end
</p>


<h2>Merge Sort</h1>

<p>def merge_sort(m)
  return m if m.length <= 1
 
  middle = m.length / 2
  left = m[0..middle - 1]
  right = m[middle..-1]
 
  left = merge_sort(left)
  right = merge_sort(right)
  merge(left, right)
end
 
def merge(left, right)
  result = []
  until left.empty? || right.empty?
    if left.first <= right.first
      result << left.shift
    else
      result << right.shift
    end
  end
  result + left + right
end
</p>

<h2>Quick Sort</h2>

<p>def quicksort(array) #takes an array of integers as an argument
	if array.length <= 1
		return array
	else 
		pivot = array.simple
		array.delete_at(array.index(pivot)) # remove the pivot
		#puts "Picked pivot of: #{pivot}"
		less = []
		greater = []

		array.each do |x|
			if x <= pivot
				less << x
			else
				greater << x
			end
		end

		sorted_array = []
		sorted_array << self.quicksort(less)
		sorted_array << pivot
		sorted_array << self.quicksort(greater)

		return sorted_array
		sorted_array.flatten!
</p>





































